/*
Package otel GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package otel

func (*LogFormat) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (*LogLevel) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *Source) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Function":
			return []string{
				"is the package path-qualified function name containing the",
				"source line. If non-empty, this string uniquely identifies a single",
				"function in the program. This may be the empty string if not known.",
			}, true
		case "File":
			return []string{
				"and Line are the file name and line number (1-based) of the source",
				"line. These may be the empty string and zero, respectively, if not known.",
			}, true
		case "Line":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
