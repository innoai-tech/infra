/*
Package webapp GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package webapp

import _ "embed"

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}

func (*OptFunc) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *Server) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Env":
			return []string{
				"app env name",
			}, true
		case "Ver":
			return []string{
				"app display version",
			}, true
		case "BaseHref":
			return []string{
				"base href",
			}, true
		case "Config":
			return []string{
				"config",
			}, true
		case "DisableHistoryFallback":
			return []string{
				"Disable http history fallback, only used for static pages",
			}, true
		case "DisableCSP":
			return []string{
				"Disable Content-Security-Policy",
			}, true
		case "Root":
			return []string{
				"AppRoot for host in fs",
			}, true
		case "Addr":
			return []string{
				"Webapp serve on",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}
